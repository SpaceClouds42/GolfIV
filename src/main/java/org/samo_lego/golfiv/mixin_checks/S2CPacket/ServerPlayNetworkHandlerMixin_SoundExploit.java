package org.samo_lego.golfiv.mixin_checks.S2CPacket;

import net.minecraft.network.Packet;
import net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.network.ServerPlayNetworkHandler;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.sound.SoundEvent;
import org.samo_lego.golfiv.mixin_checks.accessors.PlaySoundS2CPacketAccessor;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import static net.minecraft.sound.SoundEvents.*;
import static org.samo_lego.golfiv.GolfIV.golfConfig;

@Mixin(ServerPlayNetworkHandler.class)
public class ServerPlayNetworkHandlerMixin_SoundExploit {
    @Shadow public ServerPlayerEntity player;

    @Shadow @Final private MinecraftServer server;

    /**
     * Removes certain sound coordinates.
     *
     * @param packet
     * @param ci
     */
    @Inject(
            method = "sendPacket(Lnet/minecraft/network/Packet;)V",
            at = @At("HEAD")
    )
    private void patchSoundCoordinates(Packet<?> packet, CallbackInfo ci) {
        if(golfConfig.packet.patchSoundExploits && packet instanceof PlaySoundS2CPacket) {
            PlaySoundS2CPacketAccessor packetAccessor = (PlaySoundS2CPacketAccessor) packet;
            SoundEvent sound = packetAccessor.getSound();

            if(
                    ENTITY_LIGHTNING_BOLT_THUNDER.equals(sound) ||
                    ENTITY_LIGHTNING_BOLT_IMPACT.equals(sound) ||
                    ENTITY_WITHER_SPAWN.equals(sound) /*||
                    BLOCK_END_PORTAL_FRAME_FILL.equals(sound)*/ //not sure about this sound
            ) {
                // Global sounds which can be used to track players
                int maxPlayerDistance = server.getPlayerManager().getViewDistance() * 16;
                int deltaX = (int) (player.getX() - packetAccessor.getX());
                int deltaZ = (int) (player.getZ() - packetAccessor.getZ());
                int actualPlayerDistance = deltaX * deltaZ;

                if(maxPlayerDistance * maxPlayerDistance < Math.abs(actualPlayerDistance)) {
                    // We shouldn't send the right coords
                    packetAccessor.setX(maxPlayerDistance);
                    packetAccessor.setZ(maxPlayerDistance);
                }
            }
        }
    }
}
